openapi: 3.0.3
info:
  title: Tapis Files API
  description: The Tapis Files API provides for management of file resources on Tapis systems
  version: '1.2.6'
  termsOfService: "https://tapis-project.org"
  contact:
    name: "Files API - CICSupport"
    url: "https://tapis-project.org"
    email: "cicsupport@tacc.utexas.edu"
  license:
    name: 3-Clause BSD License
    url: 'https://opensource.org/licenses/BSD-3-Clause'
externalDocs:
  description: Tapis Project
  url: 'https://tapis-project.org'
servers:
  - url: 'http://localhost:8080/'
    description: Local test environment
    variables: {}
  - url: 'https://dev.develop.tapis.io/'
    description: Development environment
    variables: {}
security:
  - TapisJWT: []
tags:
  - name: General
    description: General service health and readiness
  - name: File Operations
    description: Manage file resources on Tapis systems. List, upload, copy, native operations, etc.
  - name: Content
    description: Download a file or directory.
  - name: Transfers
    description: Manage file transfers. Initiate, cancel and retrieve status.
  - name: Permissions
    description: |
      The permissions model allows for fine grained access control of paths on a Tapis system. The system owner
      may grant READ and MODIFY permission to specific users. MODIFY implies READ.
  
      Please note that Tapis also supports a higher level approach to granting access known as *Sharing*.

      Finally, be aware that Tapis permissions are independent of native permissions enforced by the underlying system host.
  - name: Sharing
    description: |
      In addition to fine grained permissions support, Tapis also supports a higher level approach to granting access.
      This approach is known simply as *sharing*. The sharing API allows you to share a path with a set of users
      as well as share publicly with all users in a tenant. Sharing a path grants users READ access to the path.
      
      Please note that the underlying host associated with a system typically also has it's own access controls.

# ------------------------------------------------------------------------------
# --- Paths -------------------------------------------------------------------
# ------------------------------------------------------------------------------
paths:

  # --- Paths for /files -----------------------------------------------------
  '/v3/files/healthcheck':
    get:
      tags:
        - General
      description: Health check
      operationId: healthCheck
      responses:
        '200':
          description: Message received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
  '/v3/files/readycheck':
    get:
      tags:
        - General
      description: Ready check
      operationId: readyCheck
      responses:
        '200':
          description: Service ready.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '503':
          description: Service unavailable.

  # --- Paths for /files/ops -----------------------------------------------------
  /v3/files/ops/{systemId}/{path}:
    get:
      tags:
        - File Operations
      description: |
        List files or objects on a Tapis system. Type for items will depend on system type. For example, for LINUX
        they will be posix files and for S3 they will be storage objects. For S3 the recurse flag is ignored and all
        objects with keys matching the path as a prefix are included.
        
        For system types that support directory hierarchies the maximum recursion depth is 20.
        
        Note that S3 buckets do not have a hierarchical structure. There are no directories. Everything is an object
        associated with a key.

        Certain services may use the query parameter *impersonationId* to be used in place of the requesting
        Tapis user. Tapis will use this user Id when performing authorization and resolving the *effectiveUserId*
        for the system.
        
        Certain services may use the query parameter *sharedAppCtx* to indicate that the request is in a shared
        application context. Tapis authorization will be bypassed.
      operationId: listFiles
      parameters:
        - name: systemId
          in: path
          description: System ID
          required: true
          schema:
            type: string
          example: system123
        - name: path
          in: path
          description: Path relative to the system *rootDir*
          required: true
          schema:
            type: string
          example: /directoryA/directoryB/
        - name: limit
          in: query
          description: pagination limit
          schema:
            type: integer
            format: int32
            default: 1000
          example: 100
        - name: offset
          in: query
          description: pagination offset
          schema:
            type: integer
            format: int64
            default: 0
          example: 1000
        - name: recurse
          in: query
          description: Recursive listing. Maximum recursion depth is 20.
          schema:
            type: boolean
            default: false
          example: false
        - name: impersonationId
          in: query
          description: Restricted. Only certain services may impersonate a Tapis user.
          schema:
            type: string
        - name: sharedAppCtx
          in: query
          description: Restricted. Only certain services may indicate that the request is in a shared context.
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: A list of files
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileListingResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        "401":
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        "403":
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        "500":
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
    put:
      tags:
        - File Operations
      description: |
        Move or copy a file, directory or object on {systemID} at path {path}. Not all operations supported for all
        system types.
      operationId: moveCopy
      parameters:
        - name: systemId
          in: path
          description: System ID
          required: true
          schema:
            type: string
        - name: path
          in: path
          description: Path relative to the system *rootDir*
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveCopyRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        "401":
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        "403":
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        "500":
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
    post:
      tags:
        - File Operations
      description: |
        The file or object will be uploaded at the {path} independent of the original name.
        Not supported for all system types.
      operationId: insert
      parameters:
        - name: systemId
          in: path
          description: System ID
          required: true
          schema:
            type: string
        - name: path
          in: path
          description: Path relative to the system *rootDir*
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - file
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        "401":
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        "403":
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        "500":
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
    delete:
      tags:
        - File Operations
      description: |
        Delete a file, directory or object on {systemID} at path {path}.
 
        For a LINUX directory this will be a recursive delete.
 
        For an S3 system, the path will represent either a single object or all objects in the bucket with a prefix
        matching the system *rootDir* if the path is the empty string.
 
        **WARNING** For an S3 system if the path is the empty string, then all objects in the bucket with a key matching
        the prefix *rootDir* will be deleted. So if the *rootDir* is also the empty string, then all objects in the bucket
        will be removed.
      operationId: delete
      parameters:
        - name: systemId
          in: path
          description: System ID
          required: true
          schema:
            type: string
        - name: path
          in: path
          description: Path relative to the system *rootDir*
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        "401":
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        "403":
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        "500":
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
  /v3/files/ops/{systemId}:
    post:
      tags:
        - File Operations
      description: |
        Create a directory on the system at the given path. Not supported for all system types.
        Certain services may use the query parameter *sharedAppCtx* to indicate that the request is in a shared
        application context. Tapis authorization will be bypassed.
      operationId: mkdir
      parameters:
        - name: systemId
          in: path
          description: System ID
          required: true
          schema:
            type: string
        - name: sharedAppCtx
          in: query
          description: Restricted. Only certain services may indicate that the request is in a shared context.
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MkdirRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        "401":
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        "403":
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        "500":
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'

  # --- Paths for /files/utils -----------------------------------------------------
  /v3/files/utils/linux/{systemId}/{path}:
    get:
      tags:
        - File Operations
      description: |
        Get native stat information for a file or directory for a system of type LINUX.
      operationId: getStatInfo
      parameters:
        - name: systemId
          in: path
          description: System ID
          required: true
          schema:
            type: string
          example: system123
        - name: path
          in: path
          description: Path relative to the system *rootDir*
          required: true
          schema:
            type: string
          example: /directoryA/file1
        - name: followLinks
          in: query
          description: When path is a symbolic link whether to get information about the link (false) or the link target (true)
          schema:
            type: boolean
            default: false
          example: true
      responses:
        "200":
          description: Linux stat information for the file or directory.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStatInfoResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        "401":
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        "403":
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        "500":
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
    post:
      tags:
        - File Operations
      description: |
        Run a native operation on a path. Operations are chmod, chown or chgrp. For a system of type LINUX.
      operationId: runLinuxNativeOp
      parameters:
        - name: systemId
          in: path
          description: System ID
          required: true
          schema:
            type: string
        - name: path
          in: path
          description: Path relative to the system *rootDir*
          required: true
          schema:
            type: string
        - name: recursive
          in: query
          description: If path is a directory this indicates whether or not to apply the changes recursively
          schema:
            type: boolean
            default: false
          example: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NativeLinuxOpRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NativeLinuxOpResultResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        "401":
          description: Not Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        "403":
          description: Not Authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'
        "500":
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStringResponse'

  # --- Paths for /files/content -------------------------------------------------
  /v3/files/content/{systemId}/{path}:
    get:
      tags:
        - Content
      description: |
        Get file or directory contents as a stream of data. Not supported for all system types.

        Certain services may use the query parameter *impersonationId* to be used in place of the requesting
        Tapis user. Tapis will use this user Id when performing authorization and resolving the *effectiveUserId*
        for the system.
        
        Certain services may use the query parameter *sharedAppCtx* to indicate that the request is in a shared
        application context. Tapis authorization will be bypassed.
      operationId: getContents
      parameters:
        - name: systemId
          in: path
          description: System ID
          required: true
          schema:
            type: string
          example: system123
        - name: path
          in: path
          description: Path relative to the system *rootDir*
          required: true
          schema:
            type: string
          example: /directoryA/directoryB/
        - name: range
          in: header
          description: Optional range of bytes to send. If not specified all content
            will be sent.
          schema:
            $ref: '#/components/schemas/HeaderByteRange'
          example: range=0,999
        - name: zip
          in: query
          description: Zip the contents of file or directory?
          schema:
            type: boolean
          example: false
        - name: more
          in: header
          description: Send 1k of UTF-8 encoded string back starting at 'page' 1, e.g. more=1
          schema:
            type: integer
            format: int64
        - name: impersonationId
          in: query
          description: Restricted. Only certain services may impersonate a Tapis user.
          schema:
            type: string
        - name: sharedAppCtx
          in: query
          description: Restricted. Only certain services may indicate that the request is in a shared context.
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Not Authenticated
        "404":
          description: Not Found
        "403":
          description: Not Authorized

  # --- Paths for /files/transfers -----------------------------------------------
  /v3/files/transfers:
    get:
      tags:
        - Transfers
      description: |
        Get a list of transfer tasks starting with the most recent.
      operationId: getRecentTransferTasks
      parameters:
        - name: limit
          in: query
          description: pagination limit
          schema:
            type: integer
            format: int32
            default: 1000
          example: 100
        - name: offset
          in: query
          description: pagination offset
          schema:
            type: integer
            format: int32
            default: 0
          example: 1000
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferTaskListResponse'
    post:
      tags:
        - Transfers
      description: |
        Create a background task which will transfer files between systems.
      operationId: createTransferTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqTransfer'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferTaskResponse'
  /v3/files/transfers/{transferTaskId}:
    get:
      tags:
        - Transfers
      description: |
        Retrieve a transfer task.
      operationId: getTransferTask
      parameters:
        - name: transferTaskId
          in: path
          description: Transfer task ID
          required: true
          schema:
            type: string
          example: 6491c2a5-acb2-40ef-b2c0-bc1fc4cd7e6c
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferTaskResponse'
    delete:
      tags:
        - Transfers
      description: |
        Request that a transfer task be cancelled.
      operationId: cancelTransferTask
      parameters:
        - name: transferTaskId
          in: path
          description: Transfer task ID
          required: true
          schema:
            type: string
          example: 6491c2a5-acb2-40ef-b2c0-bc1fc4cd7e6c
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringResponse'
  /v3/files/transfers/{transferTaskId}/details:
    get:
      tags:
        - Transfers
      description: |
        Retrieve detailed information for a transfer task.
      operationId: getTransferTaskDetails
      parameters:
        - name: transferTaskId
          in: path
          description: Transfer task ID
          required: true
          schema:
            type: string
          example: 6491c2a5-acb2-40ef-b2c0-bc1fc4cd7e6c
        - name: impersonationId
          in: query
          description: Highly restricted. Only certain services may impersonate a Tapis user.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferTaskResponse'

  # --- Paths for /files/permissions ---------------------------------------------
  /v3/files/permissions/{systemId}/{path}:
    get:
      tags:
        - Permissions
      description: |
        Get the Tapis permissions for a user for the system and path.
        If no user specified then permissions are retrieved for the user making the request.
      operationId: getPermissions
      parameters:
        - name: systemId
          in: path
          description: System ID
          required: true
          schema:
            type: string
        - name: path
          in: path
          description: Path relative to the system *rootDir*
          required: true
          schema:
            type: string
        - name: username
          in: query
          description: Username to list
          schema:
            type: string
      responses:
        "200":
          description: FilePermission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilePermissionResponse'
    post:
      tags:
        - Permissions
      description: |
        Grant access to a path for a user. Access may be READ or MODIFY. MODIFY implies READ.
      operationId: grantPermissions
      parameters:
        - name: systemId
          in: path
          description: System ID
          required: true
          schema:
            type: string
        - name: path
          in: path
          description: Path relative to the system *rootDir*
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePermissionRequest'
        required: true
      responses:
        "200":
          description: FilePermission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilePermissionResponse'
    delete:
      tags:
        - Permissions
      description: |
        Revoke access for a user for the system and path. All access is revoked.
      operationId: deletePermissions
      parameters:
        - name: systemId
          in: path
          description: System ID
          required: true
          schema:
            type: string
        - name: path
          in: path
          description: Path relative to the system *rootDir*
          required: true
          schema:
            type: string
        - name: username
          in: query
          description: Username to remove
          required: true
          schema:
            type: string
      responses:
        "200":
          description: FilePermission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringResponse'

  # --- Paths for /share and /unshare -------------------------------------------------------
  '/v3/files/share/{systemId}/{path}':
    get:
      tags:
        - Sharing
      summary: Retrieve all sharing information for a path on a system
      description: |
        Retrieve all sharing information for a path on a system. This includes all users with whom the path
        has been shared and whether or not the path has been made publicly available.
      operationId: getShareInfo
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: path
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespShareInfo'
        '400':
          description: Input error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '404':
          description: System not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
    post:
      tags:
        - Sharing
      summary: Share a path on a system with one or more users.
      description: |
        Create or update sharing information for a path on a system. The path will be shared with the list of users
        provided in the request body. Requester must be owner of the system. For LINUX systems path sharing is
        hierarchical.
      operationId: sharePath
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: path
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: A JSON object specifying updated sharing information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqShareUpdate'
      responses:
        '200':
          description: Sharing information updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/files/share_public/{systemId}/{path}':
    post:
      tags:
        - Sharing
      summary: Share a path on a system publicly with all users in the tenant.
      description: |
        Share a path on a system with all users in the tenant. Requester must be owner of the system.
      operationId: sharePathPublic
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: path
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Path shared publicly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/files/unshare/{systemId}/{path}':
    post:
      tags:
        - Sharing
      summary: Unshare a path on a system with one or more users.
      description: |
        Create or update sharing information for a path on a system. The path will be unshared with the list of users
        provided in the request body. Requester must be owner of the system.
      operationId: unSharePath
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: path
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: A JSON object specifying updated sharing information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReqShareUpdate'
      responses:
        '200':
          description: Sharing information updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '400':
          description: Input error. Invalid JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/files/unshare_public/{systemId}/{path}':
    post:
      tags:
        - Sharing
      summary: Remove public access for a path on a system.
      description: |
        Remove public sharing for a path on a system. Requester must be owner of the system.
      operationId: unSharePathPublic
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: path
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Path public access removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

  '/v3/files/unshare_all/{systemId}/{path}':
    post:
      tags:
        - Sharing
      summary: Remove all shares for a path on a system including public access.
      description: |
        Remove all shares for a path on a system including public access. This will also be done for all sub-paths.
      operationId: unSharePathAll
      parameters:
        - name: systemId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdString'
        - name: path
          in: path
          required: true
          schema:
            type: string
        - name: recurse
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: All share access removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '401':
          description: Not authorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespBasic'

# ------------------------------------------------------------------------------
# --- Components ---------------------------------------------------------------
# ------------------------------------------------------------------------------
components:
  schemas:
    # ------------------------------------------------------------------------------
    # --- Model objects ------------------------------------------------------------
    # ------------------------------------------------------------------------------
    HeaderByteRange:
      type: object
      properties:
        min:
          type: integer
          format: int64
        max:
          type: integer
          format: int64
    # --- FileInfo -----------------------------------------------------------------
    FileInfo:
      type: object
      properties:
        mimeType:
          type: string
        type:
          type: string
        owner:
          type: string
        group:
          type: string
        nativePermissions:
          type: string
        url:
          type: string
        lastModified:
          type: string
          format: date-time
        name:
          type: string
        path:
          type: string
        size:
          type: integer
          description: size in kB
          format: int64
    # --- FileStatInfo -----------------------------------------------------------------
    FileStatInfo:
      type: object
      properties:
        absolutePath:
          type: string
        uid:
          type: integer
          format: int32
        gid:
          type: integer
          format: int32
        size:
          type: integer
          format: int64
        perms:
          type: string
        accessTime:
          type: integer
          format: int64
        modifyTime:
          type: integer
          format: int64
        dir:
          type: boolean
        link:
          type: boolean
    FileListingResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/FileInfo'
        version:
          type: string
        metadata:
          type: object
    # --- FilePermission -----------------------------------------------------------
    FilePermission:
      type: object
      properties:
        tenantId:
          type: string
        username:
          type: string
        systemId:
          type: string
        path:
          type: string
        permission:
          $ref: '#/components/schemas/PermEnum'
    SharedFileObject:
      type: object
      properties:
        creator:
          type: string
          description: Username who shared the file/directory
        sharedWith:
          type: string
          description: Username who was granted access
        created:
          type: string
          description: Creation timestamp in UTC
        expiresIn:
          type: integer
          description: Number of seconds in which the share was set to expire.
          format: int32
        url:
          type: string
          description: Link to the shared file.
    ShareFileRequest:
      required:
        - expiresIn
        - username
      type: object
      properties:
        username:
          type: string
          description: The user with which to share
        expiresIn:
          maximum: 604800
          minimum: 1
          type: integer
          description: Time in seconds of expiration. minimum=1, maximum=604800 (1
            week)
          format: int32
    # --- TransferTask -------------------------------------------------------------
    TransferTask:
      type: object
      properties:
        id:
          type: integer
          format: int32
        username:
          type: string
        tenantId:
          type: string
        tag:
          type: string
        uuid:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/TransferStatusEnum'
        parentTasks:
          type: array
          items:
            $ref: '#/components/schemas/TransferTaskParent'
        estimatedTotalBytes:
          type: integer
          format: int64
        totalBytesTransferred:
          type: integer
          format: int64
        totalTransfers:
          type: integer
          format: int32
        completeTransfers:
          type: integer
          format: int32
        errorMessage:
          type: string
        created:
          type: string
          format: date-time
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
    # --- TransferTaskParent -------------------------------------------------------
    TransferTaskParent:
      type: object
      properties:
        id:
          type: integer
          format: int32
        tenantId:
          type: string
        username:
          type: string
        sourceURI:
          type: string
        destinationURI:
          type: string
        totalBytes:
          type: integer
          format: int64
        bytesTransferred:
          type: integer
          format: int64
        taskId:
          type: integer
          format: int32
        children:
          type: array
          items:
            $ref: '#/components/schemas/TransferTaskChild'
        errorMessage:
          type: string
        uuid:
          type: string
          description: Unique ID of the task.
          format: uuid
        status:
          $ref: '#/components/schemas/TransferStatusEnum'
        created:
          type: string
          format: date-time
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
    # --- TransferTaskChild --------------------------------------------------------
    TransferTaskChild:
      type: object
      properties:
        id:
          type: integer
          format: int32
        tenantId:
          type: string
        username:
          type: string
        sourceURI:
          type: string
        destinationURI:
          type: string
        totalBytes:
          type: integer
          format: int64
        bytesTransferred:
          type: integer
          format: int64
        taskId:
          type: integer
          format: int32
        errorMessage:
          type: string
        parentTaskId:
          type: integer
          format: int32
        retries:
          type: integer
          format: int32
        dir:
          type: boolean
        uuid:
          type: string
          description: Unique ID of the task.
          format: uuid
        status:
          $ref: '#/components/schemas/TransferStatusEnum'
        created:
          type: string
          format: date-time
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
    # --- String types with constraints ------------------------------------
    IdString:
      type: string
      minLength: 1
      maxLength: 80
    UserNameString:
      type: string
      minLength: 1
      maxLength: 60
    # -------------------------------------------------------------------------
    # --- Request objects -----------------------------------------------------
    # -------------------------------------------------------------------------
    MkdirRequest:
      required:
        - path
      type: object
      properties:
        path:
          pattern: ^(?!.*\.\.).*
          type: string
    MoveCopyRequest:
      required:
        - newPath
        - operation
      type: object
      properties:
        operation:
          type: string
          enum:
            - MOVE
            - COPY
        newPath:
          type: string
          description: Paths must be absolute, ../.. is not allowed
    CreatePermissionRequest:
      required:
        - permission
        - username
      type: object
      properties:
        username:
          type: string
        permission:
          $ref: '#/components/schemas/PermEnum'
    ReqShareUpdate:
      type: object
      required:
        - users
      properties:
        users:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/UserNameString'
    ReqTransfer:
      required:
        - elements
      type: object
      properties:
        tag:
          type: string
        elements:
          type: array
          items:
            $ref: '#/components/schemas/ReqTransferElement'
    ReqTransferElement:
      required:
        - destinationURI
        - sourceURI
      type: object
      properties:
        sourceURI:
          type: string
        destinationURI:
          type: string
        optional:
          type: boolean
          default: false
          description: Allow the full transfer to succeed even if this element fails.
        srcSharedAppCtx:
          type: boolean
          default: false
          description: Certain services may indicate that the request is in a shared context.
        destSharedAppCtx:
          type: boolean
          default: false
          description: Certain services may indicate that the request is in a shared context.
    NativeLinuxOpRequest:
      required:
        - argument
        - operation
      type: object
      properties:
        operation:
          type: string
          enum:
            - CHMOD
            - CHOWN
            - CHGRP
        argument:
          type: string
          description: Argument for native linux operation
    # -------------------------------------------------------------------------
    # --- Response objects ----------------------------------------------------
    # -------------------------------------------------------------------------
    RespBasic:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          type: object
        metadata:
          type: object
    FileStringResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        result:
          type: string
        version:
          type: string
        metadata:
          type: object
    StringResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        result:
          type: string
        version:
          type: string
        metadata:
          type: object
    RespString:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        result:
          type: string
        version:
          type: string
        metadata:
          type: object
    RespFileList:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/FileInfo'
        version:
          type: string
        metadata:
          type: object
    FileStatInfoResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        result:
          $ref: '#/components/schemas/FileStatInfo'
        version:
          type: string
        metadata:
          type: object
    NativeLinuxOpResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        result:
          $ref: '#/components/schemas/NativeLinuxOpResultResponse'
        version:
          type: string
        metadata:
          type: object
    NativeLinuxOpResultResponse:
      type: object
      properties:
        command:
          type: string
        exitCode:
          type: integer
          format: int32
        stdOut:
          type: string
        stdErr:
          type: string
    FilePermissionResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        result:
          $ref: '#/components/schemas/FilePermission'
        version:
          type: string
        metadata:
          type: object
    RespShareInfo:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        version:
          type: string
        result:
          $ref: '#/components/schemas/ResultShareInfo'
        metadata:
          type: object
    ResultShareInfo:
      type: object
      properties:
        isPublic:
          type: boolean
          description: Indicates given path is shared publicly
        isPublicPath:
          type: string
          description: Path that resulted in specified path being shared publicly
        userSet:
          type: array
          description: Set of users with whom the path is shared.
          items:
            $ref: '#/components/schemas/UserNameString'
        userShareInfoSet:
          type: array
          description: List of additional share information for each user.
          items:
            $ref: '#/components/schemas/UserShareInfo'
    UserShareInfo:
      type: object
      properties:
        username:
          $ref: '#/components/schemas/UserNameString'
        path:
          type: string
          description: Path that resulted in specified path being shared with the user
    TransferTaskResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        result:
          $ref: '#/components/schemas/TransferTask'
        version:
          type: string
        metadata:
          type: object
    TransferTaskListResponse:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/TransferTask'
        version:
          type: string
        metadata:
          type: object
    # -------------------------------------------------------------------------
    # --- Enums ---------------------------------------------------------------
    # -------------------------------------------------------------------------
    TransferStatusEnum:
      type: string
      description: The status of the task, such as ACCEPTED, IN_PROGRESS, COMPLETED, CANCELLED
      example: PENDING
      enum:
        - ACCEPTED
        - STAGED
        - IN_PROGRESS
        - COMPLETED
        - CANCELLED
        - FAILED
        - FAILED_OPT
        - PAUSED
    PermEnum:
      type: string
      enum:
        - READ
        - MODIFY
